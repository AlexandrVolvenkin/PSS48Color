###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           18/Sep/2024  17:14:36
# Copyright 1996-2018 IAR Systems AB.
#
#    Source file  =  
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Modbus\ModbusRTU.cpp
#    Command line =  
#        -f C:\Users\Admin\AppData\Local\Temp\EW7166.tmp
#        (--string_literals_in_flash
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Modbus\ModbusRTU.cpp
#        --cpu=m128a -ms -o
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Debug\Obj -lC
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Debug\List -lB
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Debug\List -y
#        --initializers_in_flash --root_variables --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Modbus\ -I
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\
#        --eeprom_size 4096 --dlib --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -On
#        --eec++)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Debug\List\ModbusRTU.lst
#    Object file  =  
#        D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Debug\Obj\ModbusRTU.r90
#
###############################################################################

D:\Projects\CurrentProjects\CautoProjects\PSS48Color\Modbus\ModbusRTU.cpp
      1          //-----------------------------------------------------------------------------------------------------
      2          //  Source      : FileName.cpp
      3          //  Created     : 01.06.2022
      4          //  Author      : Alexandr Volvenkin
      5          //  email       : aav-36@mail.ru
      6          //  GitHub      : https://github.com/AlexandrVolvenkin
      7          //-----------------------------------------------------------------------------------------------------
      8          #include "ModbusRTU.h"

   \                                 In  segment ABSOLUTE, at 0x9d, root
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c, root
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b, root
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a, root
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x99, root
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98, root
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95, root
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90, root
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8c, root
   \   union <unnamed> volatile __io _A_TCCR3C
   \                     _A_TCCR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8b, root
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8a, root
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x88, root
   \   union <unnamed> volatile __io _A_TCNT3
   \                     _A_TCNT3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x86, root
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x84, root
   \   union <unnamed> volatile __io _A_OCR3B
   \                     _A_OCR3B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x82, root
   \   union <unnamed> volatile __io _A_OCR3C
   \                     _A_OCR3C:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x80, root
   \   union <unnamed> volatile __io _A_ICR3
   \                     _A_ICR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x7d, root
   \   union <unnamed> volatile __io _A_ETIMSK
   \                     _A_ETIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c, root
   \   union <unnamed> volatile __io _A_ETIFR
   \                     _A_ETIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a, root
   \   union <unnamed> volatile __io _A_TCCR1C
   \                     _A_TCCR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x78, root
   \   union <unnamed> volatile __io _A_OCR1C
   \                     _A_OCR1C:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x74, root
   \   union <unnamed> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x73, root
   \   union <unnamed> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x72, root
   \   union <unnamed> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x71, root
   \   union <unnamed> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x70, root
   \   union <unnamed> volatile __io _A_TWBR
   \                     _A_TWBR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6f, root
   \   union <unnamed> volatile __io _A_OSCCAL
   \                     _A_OSCCAL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d, root
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c, root
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a, root
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x68, root
   \   union <unnamed> volatile __io _A_SPMCSR
   \                     _A_SPMCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65, root
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64, root
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x63, root
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62, root
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61, root
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f, root
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5d, root
   \   union <unnamed> volatile __io _A_SP
   \                     _A_SP:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x5c, root
   \   union <unnamed> volatile __io _A_XDIV
   \                     _A_XDIV:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b, root
   \   union <unnamed> volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a, root
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59, root
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x58, root
   \   union <unnamed> volatile __io _A_EIFR
   \                     _A_EIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57, root
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x56, root
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55, root
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54, root
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53, root
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52, root
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51, root
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x50, root
   \   union <unnamed> volatile __io _A_ASSR
   \                     _A_ASSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f, root
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e, root
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c, root
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4a, root
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x48, root
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46, root
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x45, root
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44, root
   \   union <unnamed> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x43, root
   \   union <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x42, root
   \   union <unnamed> volatile __io _A_OCDR
   \                     _A_OCDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41, root
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40, root
   \   union <unnamed> volatile __io _A_SFIOR
   \                     _A_SFIOR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e, root
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x3d, root
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c, root
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b, root
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a, root
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x39, root
   \   union <unnamed> volatile __io _A_PINA
   \                     _A_PINA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38, root
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37, root
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36, root
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35, root
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34, root
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33, root
   \   union <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32, root
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31, root
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30, root
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f, root
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e, root
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d, root
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c, root
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b, root
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a, root
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29, root
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28, root
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27, root
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x26, root
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24, root
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x23, root
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22, root
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21, root
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x20, root
   \   union <unnamed> volatile __io _A_PINF
   \                     _A_PINF:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint8_t CUart::ByteIsReceived()
   \                     ??ByteIsReceived:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   A502               LDD     R16, Z+42
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint8_t CUart::FrameIsSended()
   \                     ??FrameIsSended:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   A503               LDD     R16, Z+43
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CUart::GetFrameLength()
   \                     ??GetFrameLength:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8D00               LDD     R16, Z+24
   \   00000004   8D11               LDD     R17, Z+25
   \   00000006   9508               RET

      static __flash TDataBase CFlash::xMainDataBase;
                               ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Platform.h",368  Warning[Pe427]: 
          qualified name is not allowed in member declaration

      static __flash TDataBaseBlockPositionData CFlash::axDataBaseBlocksPositionData[];
                                                ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Platform.h",369  Warning[Pe427]: 
          qualified name is not allowed in member declaration

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CPlatform::GetSystemTick()
   \                     ??GetSystemTick:
   \   00000000   ....               LDI     R30, LOW(??m_uiSystemTick)
   \   00000002   ....               LDI     R31, (??m_uiSystemTick) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   8111               LDD     R17, Z+1
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void CPlatform::TxLedOn()
   \                     ??TxLedOn:
   \   00000000   98DB               CBI     0x1B, 0x03
   \   00000002   9508               RET
   \   00000004                      REQUIRE _A_PORTA

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void CPlatform::TxLedOff()
   \                     ??TxLedOff:
   \   00000000   9ADB               SBI     0x1B, 0x03
   \   00000002   9508               RET
   \   00000004                      REQUIRE _A_PORTA

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void CDfaLite::SetFsmState(uint8_t)
   \                     ??SetFsmState:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8320               ST      Z, R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint8_t CDfaLite::GetFsmState()
   \                     ??GetFsmState:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8100               LD      R16, Z
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CModbusRTU::HEADER_LENGTH()
   \                     ??HEADER_LENGTH:
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   E001               LDI     R16, 1
   \   00000004   E010               LDI     R17, 0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CModbusRTU::CRC_LENGTH()
   \                     ??CRC_LENGTH:
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   E002               LDI     R16, 2
   \   00000004   E010               LDI     R17, 0
   \   00000006   9508               RET
      9          #include "Crc.h"
     10          #include "DataBase.h"
     11          #include "Pss21.h"

      virtual bool IsSolved(void) {};
                                   ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Task.h",20  Warning[Pe940]: 
          missing return statement at end of non-void function
          "CTaskInterface::IsSolved"

      virtual bool IsSourceStateActive(void) {};
                                              ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Task.h",23  Warning[Pe940]: 
          missing return statement at end of non-void function
          "CTaskInterface::IsSourceStateActive"

      bool IsSolved(void) {};
                           ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Task.h",58  Warning[Pe940]: 
          missing return statement at end of non-void function
          "CIsRegularButtonPressedInterface::IsSolved"

      virtual bool IsSourceStateActive(void) {};
                                              ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Task.h",61  Warning[Pe940]: 
          missing return statement at end of non-void function
          "CIsRegularButtonPressedInterface::IsSourceStateActive"

      virtual uint16_t KEY_PRESSED_TIME(void) {};
                                               ^
"D:\Projects\CurrentProjects\CautoProjects\PSS48Color\include\Task.h",63  Warning[Pe940]: 
          missing return statement at end of non-void function
          "CIsRegularButtonPressedInterface::KEY_PRESSED_TIME"
     12          
     13          
     14          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     15          CModbusRTU::CModbusRTU()
   \                     ??CModbusRTU:
     16          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   2B0B               OR      R16, R27
   \   0000000C   F411               BRNE    ??CModbusRTU_1
   \   0000000E   E001               LDI     R16, 1
   \   00000010   C001               RJMP    ??CModbusRTU_2
   \                     ??CModbusRTU_1:
   \   00000012   E000               LDI     R16, 0
   \                     ??CModbusRTU_2:
   \   00000014   2300               TST     R16
   \   00000016   F079               BREQ    ??CModbusRTU_3
   \   00000018   ....               LDI     R16, LOW(??__vtbltbl)
   \   0000001A   2E40               MOV     R4, R16
   \   0000001C   ....               LDI     R16, (??__vtbltbl) >> 8
   \   0000001E   2E50               MOV     R5, R16
   \   00000020   01DC               MOVW    R27:R26, R25:R24
   \   00000022   961F               ADIW    R27:R26, 15
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   87A5               STD     Z+13, R26
   \   00000028   87B6               STD     Z+14, R27
   \   0000002A   018C               MOVW    R17:R16, R25:R24
   \   0000002C   5F01               SUBI    R16, 241
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   ........           CALL    ??CModbus
   \   00000034   C006               RJMP    ??CModbusRTU_4
   \                     ??CModbusRTU_3:
   \   00000036   01FC               MOVW    R31:R30, R25:R24
   \   00000038   8443               LDD     R4, Z+11
   \   0000003A   8454               LDD     R5, Z+12
   \   0000003C   01FC               MOVW    R31:R30, R25:R24
   \   0000003E   87A5               STD     Z+13, R26
   \   00000040   87B6               STD     Z+14, R27
   \                     ??CModbusRTU_4:
   \   00000042   ....               LDI     R16, LOW(??__vtbl)
   \   00000044   ....               LDI     R17, (??__vtbl) >> 8
   \   00000046   01FC               MOVW    R31:R30, R25:R24
   \   00000048   8703               STD     Z+11, R16
   \   0000004A   8714               STD     Z+12, R17
   \   0000004C   01F2               MOVW    R31:R30, R5:R4
   \   0000004E   9105               LPM     R16, Z+
   \   00000050   9114               LPM     R17, Z
   \   00000052   9731               SBIW    R31:R30, 1
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8301               STD     Z+1, R16
   \   00000058   8312               STD     Z+2, R17
     17          
     18          }
   \   0000005A   018C               MOVW    R17:R16, R25:R24
   \   0000005C   E0E6               LDI     R30, 6
   \   0000005E   ........           JMP     ?EPILOGUE_B6_L09
     19          
     20          ////-----------------------------------------------------------------------------------------------------
     21          //CModbusRTU::CModbusRTU(CUart* pxDevice,
     22          //                       uint32_t uiBaudRate,
     23          //                       char cParity,
     24          //                       uint8_t uiDataBit,
     25          //                       uint8_t uiStopBit,
     26          //                       uint8_t *puiRxBuffer,
     27          //                       uint8_t *puiTxBuffer) :
     28          //    pxDevice(pxDevice),
     29          //    uiBaudRate(uiBaudRate),
     30          //    cParity(cParity),
     31          //    uiDataBit(uiDataBit),
     32          //    uiStopBit(uiStopBit),
     33          //    m_puiRxBuffer(puiRxBuffer),
     34          //    m_puiTxBuffer(puiTxBuffer)
     35          //{
     36          //    SetFsmState(MODBUS_IDDLE);
     37          //}
     38          
     39          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     40          CModbusRTU::~CModbusRTU()
   \                     `?~CModbusRTU`:
     41          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   2B09               OR      R16, R25
   \   0000000C   F079               BREQ    `?~CModbusRTU_1`
   \   0000000E   2F0A               MOV     R16, R26
   \   00000010   2B0B               OR      R16, R27
   \   00000012   F039               BREQ    `?~CModbusRTU_2`
     42          
     43          }
   \   00000014   E020               LDI     R18, 0
   \   00000016   E030               LDI     R19, 0
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   5F01               SUBI    R16, 241
   \   0000001C   4F1F               SBCI    R17, 255
   \   0000001E   ........           CALL    `?~CModbus`
   \                     `?~CModbusRTU_2`:
   \   00000022   FBA0               BST     R26, 0
   \   00000024   F41E               BRTC    `?~CModbusRTU_1`
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   ........           CALL    `??operator delete`
   \                     `?~CModbusRTU_1`:
   \   0000002C   E0E4               LDI     R30, 4
   \   0000002E   ........           JMP     ?EPILOGUE_B4_L09
     44          
     45          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     46          void CModbusRTU::Init(CUart* pxDevice,
   \                     ??Init:
     47                                uint32_t uiBaudRate,
     48                                char cParity,
     49                                uint8_t uiDataBit,
     50                                uint8_t uiStopBit,
     51                                uint8_t *puiRxBuffer,
     52                                uint8_t *puiTxBuffer,
     53                                uint8_t *puiCoils,
     54                                uint8_t *puiDiscreteInputs,
     55                                uint16_t *pui16HoldingRegisters,
     56                                uint16_t *pui16InputRegisters,
     57                                uint16_t uiCoilsNumber,
     58                                uint16_t uiDiscreteInputsNumber,
     59                                uint16_t uiHoldingRegistersNumber,
     60                                uint16_t uiInputRegistersNumber)
     61          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9722               SBIW    R29:R28, 2
   \   00000006   8328               ST      Y, R18
   \   00000008   8339               STD     Y+1, R19
   \   0000000A   01D8               MOVW    R27:R26, R17:R16
   \   0000000C   012A               MOVW    R5:R4, R21:R20
   \   0000000E   013B               MOVW    R7:R6, R23:R22
   \   00000010   888D               LDD     R8, Y+21
   \   00000012   889E               LDD     R9, Y+22
   \   00000014   898F               LDD     R24, Y+23
   \   00000016   8D98               LDD     R25, Y+24
   \   00000018   8CED               LDD     R14, Y+29
   \   0000001A   8CFE               LDD     R15, Y+30
   \   0000001C   8CCF               LDD     R12, Y+31
   \   0000001E   A0D8               LDD     R13, Y+32
   \   00000020   A0A9               LDD     R10, Y+33
   \   00000022   A0BA               LDD     R11, Y+34
     62              m_pxDevice = pxDevice;
   \   00000024   8108               LD      R16, Y
   \   00000026   8119               LDD     R17, Y+1
   \   00000028   930D               ST      X+, R16
   \   0000002A   931C               ST      X, R17
   \   0000002C   9711               SBIW    R27:R26, 1
     63              m_uiBaudRate = uiBaudRate;
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8242               STD     Z+2, R4
   \   00000032   8253               STD     Z+3, R5
   \   00000034   8264               STD     Z+4, R6
   \   00000036   8275               STD     Z+5, R7
     64              m_cParity = cParity;
   \   00000038   890A               LDD     R16, Y+18
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   8700               STD     Z+8, R16
     65              m_uiDataBit = uiDataBit;
   \   0000003E   890B               LDD     R16, Y+19
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8306               STD     Z+6, R16
     66              m_uiStopBit = uiStopBit;
   \   00000044   890C               LDD     R16, Y+20
   \   00000046   01FD               MOVW    R31:R30, R27:R26
   \   00000048   8307               STD     Z+7, R16
     67              m_puiRxBuffer = puiRxBuffer;
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8505               LDD     R16, Z+13
   \   0000004E   8516               LDD     R17, Z+14
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   8686               STD     Z+14, R8
   \   00000054   8697               STD     Z+15, R9
     68              m_puiTxBuffer = puiTxBuffer;
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   8505               LDD     R16, Z+13
   \   0000005A   8516               LDD     R17, Z+14
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   8B80               STD     Z+16, R24
   \   00000060   8B91               STD     Z+17, R25
     69              m_puiCoils = puiCoils;
   \   00000062   8D29               LDD     R18, Y+25
   \   00000064   8D3A               LDD     R19, Y+26
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8505               LDD     R16, Z+13
   \   0000006A   8516               LDD     R17, Z+14
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   8B22               STD     Z+18, R18
   \   00000070   8B33               STD     Z+19, R19
     70              m_puiDiscreteInputs = puiDiscreteInputs;
   \   00000072   8D2B               LDD     R18, Y+27
   \   00000074   8D3C               LDD     R19, Y+28
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8505               LDD     R16, Z+13
   \   0000007A   8516               LDD     R17, Z+14
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   8B24               STD     Z+20, R18
   \   00000080   8B35               STD     Z+21, R19
     71              m_pui16HoldingRegisters = pui16HoldingRegisters;
   \   00000082   01FD               MOVW    R31:R30, R27:R26
   \   00000084   8505               LDD     R16, Z+13
   \   00000086   8516               LDD     R17, Z+14
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   8AE6               STD     Z+22, R14
   \   0000008C   8AF7               STD     Z+23, R15
     72              m_pui16InputRegisters = pui16InputRegisters;
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8505               LDD     R16, Z+13
   \   00000092   8516               LDD     R17, Z+14
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   8EC0               STD     Z+24, R12
   \   00000098   8ED1               STD     Z+25, R13
     73              m_uiCoilsNumber = uiCoilsNumber;
   \   0000009A   01FD               MOVW    R31:R30, R27:R26
   \   0000009C   8505               LDD     R16, Z+13
   \   0000009E   8516               LDD     R17, Z+14
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8EA2               STD     Z+26, R10
   \   000000A4   8EB3               STD     Z+27, R11
     74              m_uiDiscreteInputsNumber = uiDiscreteInputsNumber;
   \   000000A6   A12B               LDD     R18, Y+35
   \   000000A8   A13C               LDD     R19, Y+36
   \   000000AA   01FD               MOVW    R31:R30, R27:R26
   \   000000AC   8505               LDD     R16, Z+13
   \   000000AE   8516               LDD     R17, Z+14
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   8F24               STD     Z+28, R18
   \   000000B4   8F35               STD     Z+29, R19
     75              m_uiHoldingRegistersNumber = uiHoldingRegistersNumber;
   \   000000B6   A12D               LDD     R18, Y+37
   \   000000B8   A13E               LDD     R19, Y+38
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8505               LDD     R16, Z+13
   \   000000BE   8516               LDD     R17, Z+14
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   8F26               STD     Z+30, R18
   \   000000C4   8F37               STD     Z+31, R19
     76              m_uiInputRegistersNumber = uiInputRegistersNumber;
   \   000000C6   A12F               LDD     R18, Y+39
   \   000000C8   A538               LDD     R19, Y+40
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8505               LDD     R16, Z+13
   \   000000CE   8516               LDD     R17, Z+14
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   A320               STD     Z+32, R18
   \   000000D4   A331               STD     Z+33, R19
     77          
     78              m_uiGuardTimeout = ((((1000000UL / m_uiBaudRate) * 8UL * 4UL) / 1000UL) + 1);
   \   000000D6   01FD               MOVW    R31:R30, R27:R26
   \   000000D8   8142               LDD     R20, Z+2
   \   000000DA   8153               LDD     R21, Z+3
   \   000000DC   8164               LDD     R22, Z+4
   \   000000DE   8175               LDD     R23, Z+5
   \   000000E0   E400               LDI     R16, 64
   \   000000E2   E412               LDI     R17, 66
   \   000000E4   E02F               LDI     R18, 15
   \   000000E6   E030               LDI     R19, 0
   \   000000E8   ........           CALL    ?UL_DIVMOD_L03
   \   000000EC   E240               LDI     R20, 32
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   E060               LDI     R22, 0
   \   000000F2   E070               LDI     R23, 0
   \   000000F4   ........           CALL    ?L_EC_MUL_L03
   \   000000F8   0108               MOVW    R1:R0, R17:R16
   \   000000FA   0119               MOVW    R3:R2, R19:R18
   \   000000FC   EE48               LDI     R20, 232
   \   000000FE   E053               LDI     R21, 3
   \   00000100   E060               LDI     R22, 0
   \   00000102   E070               LDI     R23, 0
   \   00000104   0180               MOVW    R17:R16, R1:R0
   \   00000106   0191               MOVW    R19:R18, R3:R2
   \   00000108   ........           CALL    ?UL_DIVMOD_L03
   \   0000010C   5F0F               SUBI    R16, 255
   \   0000010E   4F1F               SBCI    R17, 255
   \   00000110   01FD               MOVW    R31:R30, R27:R26
   \   00000112   8701               STD     Z+9, R16
   \   00000114   8712               STD     Z+10, R17
     79          
     80              memset(m_puiCoils, 0, m_uiCoilsNumber * sizeof(uint8_t));
   \   00000116   01FD               MOVW    R31:R30, R27:R26
   \   00000118   8505               LDD     R16, Z+13
   \   0000011A   8516               LDD     R17, Z+14
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   8D42               LDD     R20, Z+26
   \   00000120   8D53               LDD     R21, Z+27
   \   00000122   E020               LDI     R18, 0
   \   00000124   E030               LDI     R19, 0
   \   00000126   01FD               MOVW    R31:R30, R27:R26
   \   00000128   8505               LDD     R16, Z+13
   \   0000012A   8516               LDD     R17, Z+14
   \   0000012C   01F8               MOVW    R31:R30, R17:R16
   \   0000012E   8902               LDD     R16, Z+18
   \   00000130   8913               LDD     R17, Z+19
   \   00000132   ........           CALL    memset
     81              memset(m_puiDiscreteInputs, 0, m_uiDiscreteInputsNumber * sizeof(uint8_t));
   \   00000136   01FD               MOVW    R31:R30, R27:R26
   \   00000138   8505               LDD     R16, Z+13
   \   0000013A   8516               LDD     R17, Z+14
   \   0000013C   01F8               MOVW    R31:R30, R17:R16
   \   0000013E   8D44               LDD     R20, Z+28
   \   00000140   8D55               LDD     R21, Z+29
   \   00000142   E020               LDI     R18, 0
   \   00000144   E030               LDI     R19, 0
   \   00000146   01FD               MOVW    R31:R30, R27:R26
   \   00000148   8505               LDD     R16, Z+13
   \   0000014A   8516               LDD     R17, Z+14
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   8904               LDD     R16, Z+20
   \   00000150   8915               LDD     R17, Z+21
   \   00000152   ........           CALL    memset
     82          //    memset(m_pui16HoldingRegisters, 0, m_uiHoldingRegistersNumber * sizeof(uint16_t));
     83              memset(m_pui16InputRegisters, 0, m_uiInputRegistersNumber * sizeof(uint16_t));
   \   00000156   01FD               MOVW    R31:R30, R27:R26
   \   00000158   8505               LDD     R16, Z+13
   \   0000015A   8516               LDD     R17, Z+14
   \   0000015C   01F8               MOVW    R31:R30, R17:R16
   \   0000015E   A140               LDD     R20, Z+32
   \   00000160   A151               LDD     R21, Z+33
   \   00000162   0F44               LSL     R20
   \   00000164   1F55               ROL     R21
   \   00000166   E020               LDI     R18, 0
   \   00000168   E030               LDI     R19, 0
   \   0000016A   01FD               MOVW    R31:R30, R27:R26
   \   0000016C   8505               LDD     R16, Z+13
   \   0000016E   8516               LDD     R17, Z+14
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   8D00               LDD     R16, Z+24
   \   00000174   8D11               LDD     R17, Z+25
   \   00000176   ........           CALL    memset
     84          
     85              m_pxDevice -> Init(m_uiBaudRate,
     86                                 m_cParity,
     87                                 m_uiDataBit,
     88                                 m_uiStopBit,
     89                                 puiRxBuffer,
     90                                 puiTxBuffer);
   \   0000017A   939A               ST      -Y, R25
   \   0000017C   938A               ST      -Y, R24
   \   0000017E   929A               ST      -Y, R9
   \   00000180   928A               ST      -Y, R8
   \   00000182   01FD               MOVW    R31:R30, R27:R26
   \   00000184   8107               LDD     R16, Z+7
   \   00000186   930A               ST      -Y, R16
   \   00000188   01FD               MOVW    R31:R30, R27:R26
   \   0000018A   8136               LDD     R19, Z+6
   \   0000018C   01FD               MOVW    R31:R30, R27:R26
   \   0000018E   8520               LDD     R18, Z+8
   \   00000190   01FD               MOVW    R31:R30, R27:R26
   \   00000192   8142               LDD     R20, Z+2
   \   00000194   8153               LDD     R21, Z+3
   \   00000196   8164               LDD     R22, Z+4
   \   00000198   8175               LDD     R23, Z+5
   \   0000019A   910D               LD      R16, X+
   \   0000019C   911C               LD      R17, X
   \   0000019E   9711               SBIW    R27:R26, 1
   \   000001A0   ........           CALL    ??Init_1
     91          }
   \   000001A4   9622               ADIW    R29:R28, 2
   \   000001A6   E2E7               LDI     R30, 39
   \   000001A8   ........           JMP     ?EPILOGUE_B16_L09
     92          
     93          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     94          void CModbusRTU::Reset(void)
   \                     ??Reset:
     95          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     96              m_pxDevice -> Reset();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??Reset_1
     97          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
     98          
     99          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    100          void CModbusRTU::Open(void)
   \                     ??Open:
    101          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    102              m_pxDevice -> Open();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??Open_1
    103          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    104          
    105          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    106          void CModbusRTU::Close(void)
   \                     ??Close:
    107          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    108              m_pxDevice -> Close();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??Close_1
    109          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    110          
    111          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    112          void CModbusRTU::ReceiveEnable(void)
   \                     ??ReceiveEnable:
    113          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    114              m_pxDevice -> Enable();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??Enable
    115          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    116          
    117          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    118          void CModbusRTU::ReceiveDisable(void)
   \                     ??ReceiveDisable:
    119          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    120              m_pxDevice -> Disable();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??Disable
    121          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    122          
    123          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    124          void CModbusRTU::TransmitEnable(void)
   \                     ??TransmitEnable:
    125          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    126              m_pxDevice -> TransmitEnable();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??TransmitEnable_1
    127          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    128          
    129          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    130          void CModbusRTU::TransmitDisable(void)
   \                     ??TransmitDisable:
    131          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    132              m_pxDevice -> TransmitDisable();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??TransmitDisable_1
    133          }
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    134          
    135          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    136          int16_t CModbusRTU::Tail(uint8_t *puiMessage, uint16_t uiLength)
   \                     ??Tail:
    137          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
    138              uint16_t uiCrc = usCrc16(puiMessage, uiLength);
   \   0000000A   019C               MOVW    R19:R18, R25:R24
   \   0000000C   018D               MOVW    R17:R16, R27:R26
   \   0000000E   ........           CALL    ??usCrc16
   \   00000012   0198               MOVW    R19:R18, R17:R16
    139              puiMessage[uiLength++] = uiCrc & 0x00FF;
   \   00000014   2F02               MOV     R16, R18
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   8300               ST      Z, R16
   \   0000001E   9601               ADIW    R25:R24, 1
    140              puiMessage[uiLength++] = uiCrc >> 8;
   \   00000020   0189               MOVW    R17:R16, R19:R18
   \   00000022   2F01               MOV     R16, R17
   \   00000024   E010               LDI     R17, 0
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   0FE8               ADD     R30, R24
   \   0000002A   1FF9               ADC     R31, R25
   \   0000002C   8300               ST      Z, R16
   \   0000002E   9601               ADIW    R25:R24, 1
    141          
    142              return uiLength;
   \   00000030   018C               MOVW    R17:R16, R25:R24
   \   00000032   E0E6               LDI     R30, 6
   \   00000034   ........           JMP     ?EPILOGUE_B6_L09
    143          }
    144          
    145          /* Builds a RTU request header */

   \                                 In  segment CODE, align 2, keep-with-next
    146          int16_t CModbusRTU::RequestBasis(uint8_t uiSlave,
   \                     ??RequestBasis:
    147                                           uint8_t uiFunctionCode,
    148                                           uint16_t uiAddress,
    149                                           uint16_t uiBitNumber,
    150                                           uint8_t *puiRequest)
    151          {
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   0108               MOVW    R1:R0, R17:R16
   \   00000004   81E8               LD      R30, Y
   \   00000006   81F9               LDD     R31, Y+1
    152              puiRequest[0] = uiSlave;
   \   00000008   8320               ST      Z, R18
    153              puiRequest[1] = uiFunctionCode;
   \   0000000A   8331               STD     Z+1, R19
    154              puiRequest[2] = (static_cast<uint8_t>(uiAddress >> 8));
   \   0000000C   018A               MOVW    R17:R16, R21:R20
   \   0000000E   2F01               MOV     R16, R17
   \   00000010   E010               LDI     R17, 0
   \   00000012   8302               STD     Z+2, R16
    155              puiRequest[3] = (static_cast<uint8_t>(uiAddress & 0x00ff));
   \   00000014   2F04               MOV     R16, R20
   \   00000016   8303               STD     Z+3, R16
    156              puiRequest[4] = (static_cast<uint8_t>(uiBitNumber >> 8));
   \   00000018   018B               MOVW    R17:R16, R23:R22
   \   0000001A   2F01               MOV     R16, R17
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   8304               STD     Z+4, R16
    157              puiRequest[5] = (static_cast<uint8_t>(uiBitNumber & 0x00ff));
   \   00000020   2F06               MOV     R16, R22
   \   00000022   8305               STD     Z+5, R16
    158          
    159              return _MODBUS_RTU_PRESET_REQ_LENGTH;
   \   00000024   E006               LDI     R16, 6
   \   00000026   E010               LDI     R17, 0
   \   00000028   01D1               MOVW    R27:R26, R3:R2
   \   0000002A   9622               ADIW    R29:R28, 2
   \   0000002C   9508               RET
    160          }
    161          
    162          /* Builds a RTU response header */

   \                                 In  segment CODE, align 2, keep-with-next
    163          int16_t CModbusRTU::ResponseBasis(uint8_t uiSlave, uint8_t uiFunctionCode, uint8_t *puiResponse)
   \                     ??ResponseBasis:
    164          {
   \   00000000   01B8               MOVW    R23:R22, R17:R16
    165              /* In this case, the slave is certainly valid because a check is already
    166               * done in _modbus_rtu_listen */
    167              puiResponse[0] = uiSlave;
   \   00000002   01FA               MOVW    R31:R30, R21:R20
   \   00000004   8320               ST      Z, R18
    168              puiResponse[1] = uiFunctionCode;
   \   00000006   01FA               MOVW    R31:R30, R21:R20
   \   00000008   8331               STD     Z+1, R19
    169          
    170              return _MODBUS_RTU_PRESET_RSP_LENGTH;
   \   0000000A   E002               LDI     R16, 2
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   9508               RET
    171          }
    172          
    173          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    174          int16_t CModbusRTU::Send(uint8_t *puiMessage, uint16_t uiLength)
   \                     ??Send:
    175          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
    176              return m_pxDevice -> Write(puiMessage, uiLength);
   \   0000000A   01AC               MOVW    R21:R20, R25:R24
   \   0000000C   0192               MOVW    R19:R18, R5:R4
   \   0000000E   910D               LD      R16, X+
   \   00000010   911C               LD      R17, X
   \   00000012   9711               SBIW    R27:R26, 1
   \   00000014   ........           CALL    ??Write
   \   00000018   E0E6               LDI     R30, 6
   \   0000001A   ........           JMP     ?EPILOGUE_B6_L09
    177          }
    178          
    179          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    180          uint8_t CModbusRTU::MessageIsSended(void)
   \                     ??MessageIsSended:
    181          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    182              return m_pxDevice -> FrameIsSended();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??FrameIsSended
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    183          }
    184          
    185          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    186          uint8_t CModbusRTU::Select(void)
   \                     ??Select:
    187          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    188              return m_pxDevice -> ByteIsReceived();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??ByteIsReceived
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    189          }
    190          
    191          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    192          int16_t CModbusRTU::Receive(uint8_t *puiDestination, uint16_t uiLength)
   \                     ??Receive:
    193          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
    194              return m_pxDevice -> Read(puiDestination, uiLength);
   \   0000000A   01AC               MOVW    R21:R20, R25:R24
   \   0000000C   0192               MOVW    R19:R18, R5:R4
   \   0000000E   910D               LD      R16, X+
   \   00000010   911C               LD      R17, X
   \   00000012   9711               SBIW    R27:R26, 1
   \   00000014   ........           CALL    ??Read
   \   00000018   E0E6               LDI     R30, 6
   \   0000001A   ........           JMP     ?EPILOGUE_B6_L09
    195          }
    196          
    197          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    198          uint8_t CModbusRTU::FrameIsReceived(void)
   \                     ??FrameIsReceived:
    199          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    200              if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
    201                      m_uiGuardTimeout)
   \   00000006   ........           CALL    ??GetSystemTick
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8525               LDD     R18, Z+13
   \   0000000E   8536               LDD     R19, Z+14
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8522               LDD     R18, Z+10
   \   00000014   8533               LDD     R19, Z+11
   \   00000016   1B02               SUB     R16, R18
   \   00000018   0B13               SBC     R17, R19
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8521               LDD     R18, Z+9
   \   0000001E   8532               LDD     R19, Z+10
   \   00000020   1702               CP      R16, R18
   \   00000022   0713               CPC     R17, R19
   \   00000024   F010               BRCS    ??FrameIsReceived_1
    202              {
    203                  return 1;
   \   00000026   E001               LDI     R16, 1
   \   00000028   C001               RJMP    ??FrameIsReceived_2
    204              }
    205              else
    206              {
    207                  return 0;
   \                     ??FrameIsReceived_1:
   \   0000002A   E000               LDI     R16, 0
   \                     ??FrameIsReceived_2:
   \   0000002C   91A9               LD      R26, Y+
   \   0000002E   91B9               LD      R27, Y+
   \   00000030   9508               RET
    208              }
    209          };
    210          
    211          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    212          uint8_t CModbusRTU::ReceiveTimeIsOver(void)
   \                     ??ReceiveTimeIsOver:
    213          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    214              if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
    215                      m_uiReceiveTimeout)
   \   00000006   ........           CALL    ??GetSystemTick
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8525               LDD     R18, Z+13
   \   0000000E   8536               LDD     R19, Z+14
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8522               LDD     R18, Z+10
   \   00000014   8533               LDD     R19, Z+11
   \   00000016   1B02               SUB     R16, R18
   \   00000018   0B13               SBC     R17, R19
   \   0000001A   3908               CPI     R16, 152
   \   0000001C   E32A               LDI     R18, 58
   \   0000001E   0712               CPC     R17, R18
   \   00000020   F010               BRCS    ??ReceiveTimeIsOver_1
    216              {
    217                  return 1;
   \   00000022   E001               LDI     R16, 1
   \   00000024   C001               RJMP    ??ReceiveTimeIsOver_2
    218              }
    219              else
    220              {
    221                  return 0;
   \                     ??ReceiveTimeIsOver_1:
   \   00000026   E000               LDI     R16, 0
   \                     ??ReceiveTimeIsOver_2:
   \   00000028   91A9               LD      R26, Y+
   \   0000002A   91B9               LD      R27, Y+
   \   0000002C   9508               RET
    222              }
    223          };
    224          
    225          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    226          uint8_t CModbusRTU::ConfirmationReceiveTimeIsOver(void)
   \                     ??ConfirmationReceiveTimeIsOver:
    227          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    228              if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
    229                      m_uiConfirmationTimeout)
   \   00000006   ........           CALL    ??GetSystemTick
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8525               LDD     R18, Z+13
   \   0000000E   8536               LDD     R19, Z+14
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8522               LDD     R18, Z+10
   \   00000014   8533               LDD     R19, Z+11
   \   00000016   1B02               SUB     R16, R18
   \   00000018   0B13               SBC     R17, R19
   \   0000001A   3E08               CPI     R16, 232
   \   0000001C   E023               LDI     R18, 3
   \   0000001E   0712               CPC     R17, R18
   \   00000020   F010               BRCS    ??ConfirmationReceiveTimeIsOver_1
    230              {
    231                  return 1;
   \   00000022   E001               LDI     R16, 1
   \   00000024   C001               RJMP    ??ConfirmationReceiveTimeIsOver_2
    232              }
    233              else
    234              {
    235                  return 0;
   \                     ??ConfirmationReceiveTimeIsOver_1:
   \   00000026   E000               LDI     R16, 0
   \                     ??ConfirmationReceiveTimeIsOver_2:
   \   00000028   91A9               LD      R26, Y+
   \   0000002A   91B9               LD      R27, Y+
   \   0000002C   9508               RET
    236              }
    237          };
    238          
    239          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    240          uint8_t CModbusRTU::TransmitDelayTimeIsOver(void)
   \                     ??TransmitDelayTimeIsOver:
    241          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    242              if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
    243                      m_uiTransmitDelayTimeout)
   \   00000006   ........           CALL    ??GetSystemTick
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8525               LDD     R18, Z+13
   \   0000000E   8536               LDD     R19, Z+14
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8522               LDD     R18, Z+10
   \   00000014   8533               LDD     R19, Z+11
   \   00000016   1B02               SUB     R16, R18
   \   00000018   0B13               SBC     R17, R19
   \   0000001A   3005               CPI     R16, 5
   \   0000001C   4010               SBCI    R17, 0
   \   0000001E   F010               BRCS    ??TransmitDelayTimeIsOver_1
    244              {
    245                  return 1;
   \   00000020   E001               LDI     R16, 1
   \   00000022   C001               RJMP    ??TransmitDelayTimeIsOver_2
    246              }
    247              else
    248              {
    249                  return 0;
   \                     ??TransmitDelayTimeIsOver_1:
   \   00000024   E000               LDI     R16, 0
   \                     ??TransmitDelayTimeIsOver_2:
   \   00000026   91A9               LD      R26, Y+
   \   00000028   91B9               LD      R27, Y+
   \   0000002A   9508               RET
    250              }
    251          };
    252          
    253          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    254          int8_t CModbusRTU::TimeIsOver(uint16_t uiTimeout)
   \                     ??TimeIsOver:
    255          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    256              if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
    257                      uiTimeout)
   \   00000008   ........           CALL    ??GetSystemTick
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8525               LDD     R18, Z+13
   \   00000010   8536               LDD     R19, Z+14
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   8522               LDD     R18, Z+10
   \   00000016   8533               LDD     R19, Z+11
   \   00000018   1B02               SUB     R16, R18
   \   0000001A   0B13               SBC     R17, R19
   \   0000001C   1708               CP      R16, R24
   \   0000001E   0719               CPC     R17, R25
   \   00000020   F010               BRCS    ??TimeIsOver_1
    258              {
    259                  return 1;
   \   00000022   E001               LDI     R16, 1
   \   00000024   C001               RJMP    ??TimeIsOver_2
    260              }
    261              else
    262              {
    263                  return 0;
   \                     ??TimeIsOver_1:
   \   00000026   E000               LDI     R16, 0
   \                     ??TimeIsOver_2:
   \   00000028   E0E4               LDI     R30, 4
   \   0000002A   ........           JMP     ?EPILOGUE_B4_L09
    264              }
    265          };
    266          
    267          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    268          uint16_t CModbusRTU::GetFrameLength(void)
   \                     ??GetFrameLength_1:
    269          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    270              return m_pxDevice -> GetFrameLength();
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??GetFrameLength
   \   00000010   91A9               LD      R26, Y+
   \   00000012   91B9               LD      R27, Y+
   \   00000014   9508               RET
    271          }
    272          
    273          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    274          void CModbusRTU::GetSystemTime(void)
   \                     ??GetSystemTime:
    275          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    276              m_uiLastSystemTime = CPlatform::GetSystemTick();
   \   00000006   ........           CALL    ??GetSystemTick
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8525               LDD     R18, Z+13
   \   0000000E   8536               LDD     R19, Z+14
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8702               STD     Z+10, R16
   \   00000014   8713               STD     Z+11, R17
    277          }
   \   00000016   91A9               LD      R26, Y+
   \   00000018   91B9               LD      R27, Y+
   \   0000001A   9508               RET
    278          
    279          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    280          int8_t CModbusRTU::FrameCheck(void)
   \                     ??FrameCheck:
    281          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    282              if (m_pxDevice -> GetFrameLength() < _MIN_MESSAGE_LENGTH)
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   ........           CALL    ??GetFrameLength
   \   00000010   3004               CPI     R16, 4
   \   00000012   4010               SBCI    R17, 0
   \   00000014   F410               BRCC    ??FrameCheck_2
    283              {
    284                  return 0;
   \   00000016   E000               LDI     R16, 0
   \   00000018   C03E               RJMP    ??FrameCheck_3
    285              }
    286          
    287              uint16_t uiCrc = ((static_cast<uint16_t>(m_puiRxBuffer[m_pxDevice -> GetFrameLength() - 1]) << 8) |
    288                                (static_cast<uint16_t>(m_puiRxBuffer[m_pxDevice -> GetFrameLength() - 2])));
   \                     ??FrameCheck_2:
   \   0000001A   910D               LD      R16, X+
   \   0000001C   911C               LD      R17, X
   \   0000001E   9711               SBIW    R27:R26, 1
   \   00000020   ........           CALL    ??GetFrameLength
   \   00000024   01C8               MOVW    R25:R24, R17:R16
   \   00000026   910D               LD      R16, X+
   \   00000028   911C               LD      R17, X
   \   0000002A   9711               SBIW    R27:R26, 1
   \   0000002C   ........           CALL    ??GetFrameLength
   \   00000030   0198               MOVW    R19:R18, R17:R16
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8505               LDD     R16, Z+13
   \   00000036   8516               LDD     R17, Z+14
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   8506               LDD     R16, Z+14
   \   0000003C   8517               LDD     R17, Z+15
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F19               ADC     R17, R25
   \   00000042   5001               SUBI    R16, 1
   \   00000044   4010               SBCI    R17, 0
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8190               LD      R25, Z
   \   0000004A   E080               LDI     R24, 0
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8505               LDD     R16, Z+13
   \   00000050   8516               LDD     R17, Z+14
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   8506               LDD     R16, Z+14
   \   00000056   8517               LDD     R17, Z+15
   \   00000058   0F02               ADD     R16, R18
   \   0000005A   1F13               ADC     R17, R19
   \   0000005C   5002               SUBI    R16, 2
   \   0000005E   4010               SBCI    R17, 0
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   8100               LD      R16, Z
   \   00000064   E010               LDI     R17, 0
   \   00000066   2B80               OR      R24, R16
   \   00000068   2B91               OR      R25, R17
    289          
    290              if (usCrc16(m_puiRxBuffer,
    291                          (m_pxDevice -> GetFrameLength() - _MODBUS_RTU_CHECKSUM_LENGTH)) == uiCrc)
   \   0000006A   910D               LD      R16, X+
   \   0000006C   911C               LD      R17, X
   \   0000006E   9711               SBIW    R27:R26, 1
   \   00000070   ........           CALL    ??GetFrameLength
   \   00000074   0198               MOVW    R19:R18, R17:R16
   \   00000076   5022               SUBI    R18, 2
   \   00000078   4030               SBCI    R19, 0
   \   0000007A   01FD               MOVW    R31:R30, R27:R26
   \   0000007C   8505               LDD     R16, Z+13
   \   0000007E   8516               LDD     R17, Z+14
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   8506               LDD     R16, Z+14
   \   00000084   8517               LDD     R17, Z+15
   \   00000086   ........           CALL    ??usCrc16
   \   0000008A   1708               CP      R16, R24
   \   0000008C   0719               CPC     R17, R25
   \   0000008E   F411               BRNE    ??FrameCheck_4
    292              {
    293                  return 1;
   \   00000090   E001               LDI     R16, 1
   \   00000092   C001               RJMP    ??FrameCheck_3
    294              }
    295              else
    296              {
    297                  return 0;
   \                     ??FrameCheck_4:
   \   00000094   E000               LDI     R16, 0
   \                     ??FrameCheck_3:
   \   00000096   E0E4               LDI     R30, 4
   \   00000098   ........           JMP     ?EPILOGUE_B4_L09
    298              }
    299          }
    300          
    301          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    302          int8_t CModbusRTU::FrameCheck(uint8_t *puiSource, uint16_t uiLength)
   \                     ??FrameCheck_1:
    303          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
    304          
    305              if (uiLength < _MIN_MESSAGE_LENGTH)
   \   0000000A   3084               CPI     R24, 4
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0790               CPC     R25, R16
   \   00000010   F410               BRCC    ??FrameCheck_5
    306              {
    307                  return 0;
   \   00000012   E000               LDI     R16, 0
   \   00000014   C021               RJMP    ??FrameCheck_6
    308              }
    309          
    310              uint16_t uiCrc = ((static_cast<uint16_t>(puiSource[uiLength - 1]) << 8) |
    311                                (static_cast<uint16_t>(puiSource[uiLength - 2])));
   \                     ??FrameCheck_5:
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   9731               SBIW    R31:R30, 1
   \   0000001E   8050               LD      R5, Z
   \   00000020   2444               CLR     R4
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   0FE8               ADD     R30, R24
   \   00000026   1FF9               ADC     R31, R25
   \   00000028   9732               SBIW    R31:R30, 2
   \   0000002A   8100               LD      R16, Z
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   2A40               OR      R4, R16
   \   00000030   2A51               OR      R5, R17
    312              uint16_t uiCrcTemp = usCrc16(puiSource,
    313                                           (uiLength - _MODBUS_RTU_CHECKSUM_LENGTH));
   \   00000032   019C               MOVW    R19:R18, R25:R24
   \   00000034   5022               SUBI    R18, 2
   \   00000036   4030               SBCI    R19, 0
   \   00000038   018D               MOVW    R17:R16, R27:R26
   \   0000003A   ........           CALL    ??usCrc16
   \   0000003E   0138               MOVW    R7:R6, R17:R16
    314              if (usCrc16(puiSource,
    315                          (uiLength - _MODBUS_RTU_CHECKSUM_LENGTH)) == uiCrc)
   \   00000040   019C               MOVW    R19:R18, R25:R24
   \   00000042   5022               SUBI    R18, 2
   \   00000044   4030               SBCI    R19, 0
   \   00000046   018D               MOVW    R17:R16, R27:R26
   \   00000048   ........           CALL    ??usCrc16
   \   0000004C   1504               CP      R16, R4
   \   0000004E   0515               CPC     R17, R5
   \   00000050   F411               BRNE    ??FrameCheck_7
    316              {
    317                  return 1;
   \   00000052   E001               LDI     R16, 1
   \   00000054   C001               RJMP    ??FrameCheck_6
    318              }
    319              else
    320              {
    321                  return 0;
   \                     ??FrameCheck_7:
   \   00000056   E000               LDI     R16, 0
   \                     ??FrameCheck_6:
   \   00000058   E0EA               LDI     R30, 10
   \   0000005A   ........           JMP     ?EPILOGUE_B10_L09
    322              }
    323          }
    324          
    325          //-----------------------------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    326          void CModbusRTU::Fsm(void)
   \                     ??Fsm:
    327          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    328              int16_t iReceivedCounter;
    329          
    330          //            if (CPss21::m_auiReceiveMessageBuff[1] == 0x46 && CPss21::m_auiReceiveMessageBuff[5] == 0x0a)
    331          //            {
    332          //        iReceivedCounter = 0;
    333          //            }
    334              switch (GetFsmState())
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8505               LDD     R16, Z+13
   \   0000000A   8516               LDD     R17, Z+14
   \   0000000C   ........           CALL    ??GetFsmState
   \   00000010   ....               LDI     R30, LOW(`?<Jumptable for Fsm>_0`)
   \   00000012   ....               LDI     R31, (`?<Jumptable for Fsm>_0`) >> 16
   \   00000014   BFFB               OUT     0x3B, R31
   \   00000016   ....               LDI     R31, HIGH(`?<Jumptable for Fsm>_0`)
   \   00000018   ........           JMP     ?CV_SWITCH_L06
    335              {
    336              case IDDLE:
    337                  break;
    338          
    339              case START_SLAVE:
    340                  Reset();
   \                     ??Fsm_1:
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ....               RCALL   ??Reset
    341                  ReceiveEnable();
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   ....               RCALL   ??ReceiveEnable
    342                  SetFsmState(START_REQUEST);
   \   00000024   E023               LDI     R18, 3
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8505               LDD     R16, Z+13
   \   0000002A   8516               LDD     R17, Z+14
   \   0000002C   ........           CALL    ??SetFsmState
    343                  break;
   \   00000030   C259               RJMP    ??Fsm_2
    344          
    345              case START_REQUEST:
    346                  GetSystemTime();
   \                     ??Fsm_3:
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   ....               RCALL   ??GetSystemTime
    347                  m_uiMessageLength = 0;
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   8505               LDD     R16, Z+13
   \   0000003A   8516               LDD     R17, Z+14
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   E000               LDI     R16, 0
   \   00000040   8704               STD     Z+12, R16
   \   00000042   E000               LDI     R16, 0
   \   00000044   8705               STD     Z+13, R16
    348                  SetFsmState(WAITING_MESSAGE_REQUEST);
   \   00000046   E024               LDI     R18, 4
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8505               LDD     R16, Z+13
   \   0000004C   8516               LDD     R17, Z+14
   \   0000004E   ........           CALL    ??SetFsmState
    349                  break;
   \   00000052   C248               RJMP    ??Fsm_2
    350          
    351              case WAITING_MESSAGE_REQUEST:
    352                  if (Select())
   \                     ??Fsm_4:
   \   00000054   018D               MOVW    R17:R16, R27:R26
   \   00000056   ....               RCALL   ??Select
   \   00000058   2300               TST     R16
   \   0000005A   F1F1               BREQ    ??Fsm_5
    353                  {
    354                      iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
   \   0000005C   E040               LDI     R20, 0
   \   0000005E   E051               LDI     R21, 1
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   8505               LDD     R16, Z+13
   \   00000064   8516               LDD     R17, Z+14
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8504               LDD     R16, Z+12
   \   0000006A   8515               LDD     R17, Z+13
   \   0000006C   1B40               SUB     R20, R16
   \   0000006E   0B51               SBC     R21, R17
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   8505               LDD     R16, Z+13
   \   00000074   8516               LDD     R17, Z+14
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   8526               LDD     R18, Z+14
   \   0000007A   8537               LDD     R19, Z+15
   \   0000007C   01FD               MOVW    R31:R30, R27:R26
   \   0000007E   8505               LDD     R16, Z+13
   \   00000080   8516               LDD     R17, Z+14
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   8504               LDD     R16, Z+12
   \   00000086   8515               LDD     R17, Z+13
   \   00000088   0F20               ADD     R18, R16
   \   0000008A   1F31               ADC     R19, R17
   \   0000008C   018D               MOVW    R17:R16, R27:R26
   \   0000008E   ....               RCALL   ??Receive
   \   00000090   01C8               MOVW    R25:R24, R17:R16
    355          
    356                      if (iReceivedCounter > 0)
   \   00000092   3081               CPI     R24, 1
   \   00000094   E000               LDI     R16, 0
   \   00000096   0790               CPC     R25, R16
   \   00000098   F09C               BRLT    ??Fsm_6
    357                      {
    358                          m_uiMessageLength += iReceivedCounter;
   \   0000009A   01FD               MOVW    R31:R30, R27:R26
   \   0000009C   8505               LDD     R16, Z+13
   \   0000009E   8516               LDD     R17, Z+14
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8504               LDD     R16, Z+12
   \   000000A4   8515               LDD     R17, Z+13
   \   000000A6   0F08               ADD     R16, R24
   \   000000A8   1F19               ADC     R17, R25
   \   000000AA   8704               STD     Z+12, R16
   \   000000AC   8715               STD     Z+13, R17
    359                          GetSystemTime();
   \   000000AE   018D               MOVW    R17:R16, R27:R26
   \   000000B0   ....               RCALL   ??GetSystemTime
    360                          SetFsmState(RECEIVE_MESSAGE_REQUEST);
   \   000000B2   E025               LDI     R18, 5
   \   000000B4   01FD               MOVW    R31:R30, R27:R26
   \   000000B6   8505               LDD     R16, Z+13
   \   000000B8   8516               LDD     R17, Z+14
   \   000000BA   ........           CALL    ??SetFsmState
   \   000000BE   C00C               RJMP    ??Fsm_5
    361                      }
    362                      else if (iReceivedCounter == -1)
   \                     ??Fsm_6:
   \   000000C0   3F8F               CPI     R24, 255
   \   000000C2   EF0F               LDI     R16, 255
   \   000000C4   0790               CPC     R25, R16
   \   000000C6   F441               BRNE    ??Fsm_5
    363                      {
    364                          Reset();
   \   000000C8   018D               MOVW    R17:R16, R27:R26
   \   000000CA   ....               RCALL   ??Reset
    365                          SetFsmState(START_REQUEST);
   \   000000CC   E023               LDI     R18, 3
   \   000000CE   01FD               MOVW    R31:R30, R27:R26
   \   000000D0   8505               LDD     R16, Z+13
   \   000000D2   8516               LDD     R17, Z+14
   \   000000D4   ........           CALL    ??SetFsmState
    366                      }
    367                  }
    368          
    369                  if (TimeIsOver(m_uiReceiveTimeout))
   \                     ??Fsm_5:
   \   000000D8   E928               LDI     R18, 152
   \   000000DA   E33A               LDI     R19, 58
   \   000000DC   018D               MOVW    R17:R16, R27:R26
   \   000000DE   ....               RCALL   ??TimeIsOver
   \   000000E0   2300               TST     R16
   \   000000E2   F041               BREQ    ??Fsm_7
    370                  {
    371                      Reset();
   \   000000E4   018D               MOVW    R17:R16, R27:R26
   \   000000E6   ....               RCALL   ??Reset
    372                      SetFsmState(START_REQUEST);
   \   000000E8   E023               LDI     R18, 3
   \   000000EA   01FD               MOVW    R31:R30, R27:R26
   \   000000EC   8505               LDD     R16, Z+13
   \   000000EE   8516               LDD     R17, Z+14
   \   000000F0   ........           CALL    ??SetFsmState
    373                  }
    374          
    375                  break;
   \                     ??Fsm_7:
   \   000000F4   C1F7               RJMP    ??Fsm_2
    376          
    377              case RECEIVE_MESSAGE_REQUEST:
    378                  if (Select())
   \                     ??Fsm_8:
   \   000000F6   018D               MOVW    R17:R16, R27:R26
   \   000000F8   ....               RCALL   ??Select
   \   000000FA   2300               TST     R16
   \   000000FC   F1C1               BREQ    ??Fsm_9
    379                  {
    380                      iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
   \   000000FE   E040               LDI     R20, 0
   \   00000100   E051               LDI     R21, 1
   \   00000102   01FD               MOVW    R31:R30, R27:R26
   \   00000104   8505               LDD     R16, Z+13
   \   00000106   8516               LDD     R17, Z+14
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   8504               LDD     R16, Z+12
   \   0000010C   8515               LDD     R17, Z+13
   \   0000010E   1B40               SUB     R20, R16
   \   00000110   0B51               SBC     R21, R17
   \   00000112   01FD               MOVW    R31:R30, R27:R26
   \   00000114   8505               LDD     R16, Z+13
   \   00000116   8516               LDD     R17, Z+14
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   8526               LDD     R18, Z+14
   \   0000011C   8537               LDD     R19, Z+15
   \   0000011E   01FD               MOVW    R31:R30, R27:R26
   \   00000120   8505               LDD     R16, Z+13
   \   00000122   8516               LDD     R17, Z+14
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   8504               LDD     R16, Z+12
   \   00000128   8515               LDD     R17, Z+13
   \   0000012A   0F20               ADD     R18, R16
   \   0000012C   1F31               ADC     R19, R17
   \   0000012E   018D               MOVW    R17:R16, R27:R26
   \   00000130   ....               RCALL   ??Receive
   \   00000132   01C8               MOVW    R25:R24, R17:R16
    381          
    382                      if (iReceivedCounter > 0)
   \   00000134   3081               CPI     R24, 1
   \   00000136   E000               LDI     R16, 0
   \   00000138   0790               CPC     R25, R16
   \   0000013A   F06C               BRLT    ??Fsm_10
    383                      {
    384                          m_uiMessageLength += iReceivedCounter;
   \   0000013C   01FD               MOVW    R31:R30, R27:R26
   \   0000013E   8505               LDD     R16, Z+13
   \   00000140   8516               LDD     R17, Z+14
   \   00000142   01F8               MOVW    R31:R30, R17:R16
   \   00000144   8504               LDD     R16, Z+12
   \   00000146   8515               LDD     R17, Z+13
   \   00000148   0F08               ADD     R16, R24
   \   0000014A   1F19               ADC     R17, R25
   \   0000014C   8704               STD     Z+12, R16
   \   0000014E   8715               STD     Z+13, R17
    385                          GetSystemTime();
   \   00000150   018D               MOVW    R17:R16, R27:R26
   \   00000152   ....               RCALL   ??GetSystemTime
   \   00000154   C00C               RJMP    ??Fsm_9
    386                      }
    387                      else if (iReceivedCounter == -1)
   \                     ??Fsm_10:
   \   00000156   3F8F               CPI     R24, 255
   \   00000158   EF0F               LDI     R16, 255
   \   0000015A   0790               CPC     R25, R16
   \   0000015C   F441               BRNE    ??Fsm_9
    388                      {
    389                          Reset();
   \   0000015E   018D               MOVW    R17:R16, R27:R26
   \   00000160   ....               RCALL   ??Reset
    390                          SetFsmState(START_REQUEST);
   \   00000162   E023               LDI     R18, 3
   \   00000164   01FD               MOVW    R31:R30, R27:R26
   \   00000166   8505               LDD     R16, Z+13
   \   00000168   8516               LDD     R17, Z+14
   \   0000016A   ........           CALL    ??SetFsmState
    391                      }
    392                  }
    393          
    394                  if (TimeIsOver(m_uiGuardTimeout))
   \                     ??Fsm_9:
   \   0000016E   01FD               MOVW    R31:R30, R27:R26
   \   00000170   8521               LDD     R18, Z+9
   \   00000172   8532               LDD     R19, Z+10
   \   00000174   018D               MOVW    R17:R16, R27:R26
   \   00000176   ....               RCALL   ??TimeIsOver
   \   00000178   2300               TST     R16
   \   0000017A   F0F9               BREQ    ??Fsm_11
    395                  {
    396                      if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
   \   0000017C   01FD               MOVW    R31:R30, R27:R26
   \   0000017E   8505               LDD     R16, Z+13
   \   00000180   8516               LDD     R17, Z+14
   \   00000182   01F8               MOVW    R31:R30, R17:R16
   \   00000184   8544               LDD     R20, Z+12
   \   00000186   8555               LDD     R21, Z+13
   \   00000188   01FD               MOVW    R31:R30, R27:R26
   \   0000018A   8505               LDD     R16, Z+13
   \   0000018C   8516               LDD     R17, Z+14
   \   0000018E   01F8               MOVW    R31:R30, R17:R16
   \   00000190   8526               LDD     R18, Z+14
   \   00000192   8537               LDD     R19, Z+15
   \   00000194   018D               MOVW    R17:R16, R27:R26
   \   00000196   ....               RCALL   ??FrameCheck_1
   \   00000198   2300               TST     R16
   \   0000019A   F039               BREQ    ??Fsm_12
    397                      {
    398                          SetFsmState(REPLY_REQUEST);
   \   0000019C   E026               LDI     R18, 6
   \   0000019E   01FD               MOVW    R31:R30, R27:R26
   \   000001A0   8505               LDD     R16, Z+13
   \   000001A2   8516               LDD     R17, Z+14
   \   000001A4   ........           CALL    ??SetFsmState
   \   000001A8   C19D               RJMP    ??Fsm_2
    399                      }
    400                      else
    401                      {
    402                          Reset();
   \                     ??Fsm_12:
   \   000001AA   018D               MOVW    R17:R16, R27:R26
   \   000001AC   ....               RCALL   ??Reset
    403                          SetFsmState(START_REQUEST);
   \   000001AE   E023               LDI     R18, 3
   \   000001B0   01FD               MOVW    R31:R30, R27:R26
   \   000001B2   8505               LDD     R16, Z+13
   \   000001B4   8516               LDD     R17, Z+14
   \   000001B6   ........           CALL    ??SetFsmState
    404                      }
    405                  }
    406          
    407                  break;
   \                     ??Fsm_11:
   \   000001BA   C194               RJMP    ??Fsm_2
    408          
    409              case REPLY_REQUEST:
    410                  if (Reply(m_puiRxBuffer, m_puiTxBuffer, m_uiMessageLength))
   \                     ??Fsm_13:
   \   000001BC   01FD               MOVW    R31:R30, R27:R26
   \   000001BE   8505               LDD     R16, Z+13
   \   000001C0   8516               LDD     R17, Z+14
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   8564               LDD     R22, Z+12
   \   000001C6   8575               LDD     R23, Z+13
   \   000001C8   01FD               MOVW    R31:R30, R27:R26
   \   000001CA   8505               LDD     R16, Z+13
   \   000001CC   8516               LDD     R17, Z+14
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   8940               LDD     R20, Z+16
   \   000001D2   8951               LDD     R21, Z+17
   \   000001D4   01FD               MOVW    R31:R30, R27:R26
   \   000001D6   8505               LDD     R16, Z+13
   \   000001D8   8516               LDD     R17, Z+14
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   8526               LDD     R18, Z+14
   \   000001DE   8537               LDD     R19, Z+15
   \   000001E0   01FD               MOVW    R31:R30, R27:R26
   \   000001E2   8505               LDD     R16, Z+13
   \   000001E4   8516               LDD     R17, Z+14
   \   000001E6   ........           CALL    ??Reply
   \   000001EA   2B01               OR      R16, R17
   \   000001EC   F049               BREQ    ??Fsm_14
    411                  {
    412                      CPlatform::TxLedOn();
   \   000001EE   ........           CALL    ??TxLedOn
    413                      SetFsmState(FRAME_TRANSMIT_CONFIRMATION);
   \   000001F2   E027               LDI     R18, 7
   \   000001F4   01FD               MOVW    R31:R30, R27:R26
   \   000001F6   8505               LDD     R16, Z+13
   \   000001F8   8516               LDD     R17, Z+14
   \   000001FA   ........           CALL    ??SetFsmState
   \   000001FE   C172               RJMP    ??Fsm_2
    414                  }
    415                  else
    416                  {
    417                      CPlatform::TxLedOff();
   \                     ??Fsm_14:
   \   00000200   ........           CALL    ??TxLedOff
    418                      Reset();
   \   00000204   018D               MOVW    R17:R16, R27:R26
   \   00000206   ....               RCALL   ??Reset
    419                      SetFsmState(START_REQUEST);
   \   00000208   E023               LDI     R18, 3
   \   0000020A   01FD               MOVW    R31:R30, R27:R26
   \   0000020C   8505               LDD     R16, Z+13
   \   0000020E   8516               LDD     R17, Z+14
   \   00000210   ........           CALL    ??SetFsmState
    420                  }
    421                  break;
   \   00000214   C167               RJMP    ??Fsm_2
    422          
    423              case FRAME_TRANSMIT_CONFIRMATION:
    424                  GetSystemTime();
   \                     ??Fsm_15:
   \   00000216   018D               MOVW    R17:R16, R27:R26
   \   00000218   ....               RCALL   ??GetSystemTime
    425                  Reset();
   \   0000021A   018D               MOVW    R17:R16, R27:R26
   \   0000021C   ....               RCALL   ??Reset
    426                  SetFsmState(WAITING_FRAME_TRANSMIT_CONFIRMATION);
   \   0000021E   E028               LDI     R18, 8
   \   00000220   01FD               MOVW    R31:R30, R27:R26
   \   00000222   8505               LDD     R16, Z+13
   \   00000224   8516               LDD     R17, Z+14
   \   00000226   ........           CALL    ??SetFsmState
    427                  break;
   \   0000022A   C15C               RJMP    ??Fsm_2
    428          
    429              case WAITING_FRAME_TRANSMIT_CONFIRMATION:
    430                  if (TimeIsOver(m_uiTransmitDelayTimeout))
   \                     ??Fsm_16:
   \   0000022C   E025               LDI     R18, 5
   \   0000022E   E030               LDI     R19, 0
   \   00000230   018D               MOVW    R17:R16, R27:R26
   \   00000232   ....               RCALL   ??TimeIsOver
   \   00000234   2300               TST     R16
   \   00000236   F0C9               BREQ    ??Fsm_17
    431                  {
    432                      SendMessage(m_puiTxBuffer, m_uiMessageLength);
   \   00000238   01FD               MOVW    R31:R30, R27:R26
   \   0000023A   8505               LDD     R16, Z+13
   \   0000023C   8516               LDD     R17, Z+14
   \   0000023E   01F8               MOVW    R31:R30, R17:R16
   \   00000240   8544               LDD     R20, Z+12
   \   00000242   8555               LDD     R21, Z+13
   \   00000244   01FD               MOVW    R31:R30, R27:R26
   \   00000246   8505               LDD     R16, Z+13
   \   00000248   8516               LDD     R17, Z+14
   \   0000024A   01F8               MOVW    R31:R30, R17:R16
   \   0000024C   8920               LDD     R18, Z+16
   \   0000024E   8931               LDD     R19, Z+17
   \   00000250   01FD               MOVW    R31:R30, R27:R26
   \   00000252   8505               LDD     R16, Z+13
   \   00000254   8516               LDD     R17, Z+14
   \   00000256   ........           CALL    ??SendMessage
    433                      TransmitEnable();
   \   0000025A   018D               MOVW    R17:R16, R27:R26
   \   0000025C   ....               RCALL   ??TransmitEnable
    434                      SetFsmState(END_WAITING_FRAME_TRANSMIT_CONFIRMATION);
   \   0000025E   E029               LDI     R18, 9
   \   00000260   01FD               MOVW    R31:R30, R27:R26
   \   00000262   8505               LDD     R16, Z+13
   \   00000264   8516               LDD     R17, Z+14
   \   00000266   ........           CALL    ??SetFsmState
    435                  }
    436                  break;
   \                     ??Fsm_17:
   \   0000026A   C13C               RJMP    ??Fsm_2
    437          
    438              case END_WAITING_FRAME_TRANSMIT_CONFIRMATION:
    439                  if (MessageIsSended())
   \                     ??Fsm_18:
   \   0000026C   018D               MOVW    R17:R16, R27:R26
   \   0000026E   ....               RCALL   ??MessageIsSended
   \   00000270   2300               TST     R16
   \   00000272   F041               BREQ    ??Fsm_19
    440                  {
    441          //            TransmitDisable();
    442                      CPlatform::TxLedOff();
   \   00000274   ........           CALL    ??TxLedOff
    443                      SetFsmState(START_REQUEST);
   \   00000278   E023               LDI     R18, 3
   \   0000027A   01FD               MOVW    R31:R30, R27:R26
   \   0000027C   8505               LDD     R16, Z+13
   \   0000027E   8516               LDD     R17, Z+14
   \   00000280   ........           CALL    ??SetFsmState
    444                  }
    445          
    446                  break;
   \                     ??Fsm_19:
   \   00000284   C12F               RJMP    ??Fsm_2
    447          
    448              case STOP_REQUEST:
    449                  ReceiveDisable();
   \                     ??Fsm_20:
   \   00000286   018D               MOVW    R17:R16, R27:R26
   \   00000288   ....               RCALL   ??ReceiveDisable
    450          //        Close();
    451                  SetFsmState(IDDLE);
   \   0000028A   E020               LDI     R18, 0
   \   0000028C   01FD               MOVW    R31:R30, R27:R26
   \   0000028E   8505               LDD     R16, Z+13
   \   00000290   8516               LDD     R17, Z+14
   \   00000292   ........           CALL    ??SetFsmState
    452                  break;
   \   00000296   C126               RJMP    ??Fsm_2
    453          
    454          //-----------------------------------------------------------------------------------------------------
    455          // ModbusMaster
    456              case START_CONFIRMATION:
    457                  GetSystemTime();
   \                     ??Fsm_21:
   \   00000298   018D               MOVW    R17:R16, R27:R26
   \   0000029A   ....               RCALL   ??GetSystemTime
    458                  Reset();
   \   0000029C   018D               MOVW    R17:R16, R27:R26
   \   0000029E   ....               RCALL   ??Reset
    459                  m_uiMessageLength = 0;
   \   000002A0   01FD               MOVW    R31:R30, R27:R26
   \   000002A2   8505               LDD     R16, Z+13
   \   000002A4   8516               LDD     R17, Z+14
   \   000002A6   01F8               MOVW    R31:R30, R17:R16
   \   000002A8   E000               LDI     R16, 0
   \   000002AA   8704               STD     Z+12, R16
   \   000002AC   E000               LDI     R16, 0
   \   000002AE   8705               STD     Z+13, R16
    460          //        Open();
    461                  ReceiveEnable();
   \   000002B0   018D               MOVW    R17:R16, R27:R26
   \   000002B2   ....               RCALL   ??ReceiveEnable
    462                  SetFsmState(WAITING_MESSAGE_CONFIRMATION);
   \   000002B4   E02D               LDI     R18, 13
   \   000002B6   01FD               MOVW    R31:R30, R27:R26
   \   000002B8   8505               LDD     R16, Z+13
   \   000002BA   8516               LDD     R17, Z+14
   \   000002BC   ........           CALL    ??SetFsmState
    463                  break;
   \   000002C0   C111               RJMP    ??Fsm_2
    464          
    465              case WAITING_MESSAGE_CONFIRMATION:
    466                  if (Select())
   \                     ??Fsm_22:
   \   000002C2   018D               MOVW    R17:R16, R27:R26
   \   000002C4   ....               RCALL   ??Select
   \   000002C6   2300               TST     R16
   \   000002C8   F1E1               BREQ    ??Fsm_23
    467                  {
    468                      iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
   \   000002CA   E040               LDI     R20, 0
   \   000002CC   E051               LDI     R21, 1
   \   000002CE   01FD               MOVW    R31:R30, R27:R26
   \   000002D0   8505               LDD     R16, Z+13
   \   000002D2   8516               LDD     R17, Z+14
   \   000002D4   01F8               MOVW    R31:R30, R17:R16
   \   000002D6   8504               LDD     R16, Z+12
   \   000002D8   8515               LDD     R17, Z+13
   \   000002DA   1B40               SUB     R20, R16
   \   000002DC   0B51               SBC     R21, R17
   \   000002DE   01FD               MOVW    R31:R30, R27:R26
   \   000002E0   8505               LDD     R16, Z+13
   \   000002E2   8516               LDD     R17, Z+14
   \   000002E4   01F8               MOVW    R31:R30, R17:R16
   \   000002E6   8526               LDD     R18, Z+14
   \   000002E8   8537               LDD     R19, Z+15
   \   000002EA   01FD               MOVW    R31:R30, R27:R26
   \   000002EC   8505               LDD     R16, Z+13
   \   000002EE   8516               LDD     R17, Z+14
   \   000002F0   01F8               MOVW    R31:R30, R17:R16
   \   000002F2   8504               LDD     R16, Z+12
   \   000002F4   8515               LDD     R17, Z+13
   \   000002F6   0F20               ADD     R18, R16
   \   000002F8   1F31               ADC     R19, R17
   \   000002FA   018D               MOVW    R17:R16, R27:R26
   \   000002FC   ....               RCALL   ??Receive
   \   000002FE   01C8               MOVW    R25:R24, R17:R16
    469          
    470                      if (iReceivedCounter > 0)
   \   00000300   3081               CPI     R24, 1
   \   00000302   E000               LDI     R16, 0
   \   00000304   0790               CPC     R25, R16
   \   00000306   F09C               BRLT    ??Fsm_24
    471                      {
    472                          GetSystemTime();
   \   00000308   018D               MOVW    R17:R16, R27:R26
   \   0000030A   ....               RCALL   ??GetSystemTime
    473                          m_uiMessageLength += iReceivedCounter;
   \   0000030C   01FD               MOVW    R31:R30, R27:R26
   \   0000030E   8505               LDD     R16, Z+13
   \   00000310   8516               LDD     R17, Z+14
   \   00000312   01F8               MOVW    R31:R30, R17:R16
   \   00000314   8504               LDD     R16, Z+12
   \   00000316   8515               LDD     R17, Z+13
   \   00000318   0F08               ADD     R16, R24
   \   0000031A   1F19               ADC     R17, R25
   \   0000031C   8704               STD     Z+12, R16
   \   0000031E   8715               STD     Z+13, R17
    474                          SetFsmState(RECEIVE_MESSAGE_CONFIRMATION);
   \   00000320   E02E               LDI     R18, 14
   \   00000322   01FD               MOVW    R31:R30, R27:R26
   \   00000324   8505               LDD     R16, Z+13
   \   00000326   8516               LDD     R17, Z+14
   \   00000328   ........           CALL    ??SetFsmState
   \   0000032C   C00A               RJMP    ??Fsm_23
    475                      }
    476                      else if (iReceivedCounter == -1)
   \                     ??Fsm_24:
   \   0000032E   3F8F               CPI     R24, 255
   \   00000330   EF0F               LDI     R16, 255
   \   00000332   0790               CPC     R25, R16
   \   00000334   F431               BRNE    ??Fsm_23
    477                      {
    478                          SetFsmState(STOP_CONFIRMATION);
   \   00000336   E123               LDI     R18, 19
   \   00000338   01FD               MOVW    R31:R30, R27:R26
   \   0000033A   8505               LDD     R16, Z+13
   \   0000033C   8516               LDD     R17, Z+14
   \   0000033E   ........           CALL    ??SetFsmState
    479                      }
    480                  }
    481          
    482                  if (TimeIsOver(m_uiConfirmationTimeout))
   \                     ??Fsm_23:
   \   00000342   EE28               LDI     R18, 232
   \   00000344   E033               LDI     R19, 3
   \   00000346   018D               MOVW    R17:R16, R27:R26
   \   00000348   ....               RCALL   ??TimeIsOver
   \   0000034A   2300               TST     R16
   \   0000034C   F031               BREQ    ??Fsm_25
    483                  {
    484                      SetFsmState(STOP_CONFIRMATION);
   \   0000034E   E123               LDI     R18, 19
   \   00000350   01FD               MOVW    R31:R30, R27:R26
   \   00000352   8505               LDD     R16, Z+13
   \   00000354   8516               LDD     R17, Z+14
   \   00000356   ........           CALL    ??SetFsmState
    485                  }
    486          
    487                  break;
   \                     ??Fsm_25:
   \   0000035A   C0C4               RJMP    ??Fsm_2
    488          
    489              case RECEIVE_MESSAGE_CONFIRMATION:
    490                  if (Select())
   \                     ??Fsm_26:
   \   0000035C   018D               MOVW    R17:R16, R27:R26
   \   0000035E   ....               RCALL   ??Select
   \   00000360   2300               TST     R16
   \   00000362   F1B1               BREQ    ??Fsm_27
    491                  {
    492                      iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
   \   00000364   E040               LDI     R20, 0
   \   00000366   E051               LDI     R21, 1
   \   00000368   01FD               MOVW    R31:R30, R27:R26
   \   0000036A   8505               LDD     R16, Z+13
   \   0000036C   8516               LDD     R17, Z+14
   \   0000036E   01F8               MOVW    R31:R30, R17:R16
   \   00000370   8504               LDD     R16, Z+12
   \   00000372   8515               LDD     R17, Z+13
   \   00000374   1B40               SUB     R20, R16
   \   00000376   0B51               SBC     R21, R17
   \   00000378   01FD               MOVW    R31:R30, R27:R26
   \   0000037A   8505               LDD     R16, Z+13
   \   0000037C   8516               LDD     R17, Z+14
   \   0000037E   01F8               MOVW    R31:R30, R17:R16
   \   00000380   8526               LDD     R18, Z+14
   \   00000382   8537               LDD     R19, Z+15
   \   00000384   01FD               MOVW    R31:R30, R27:R26
   \   00000386   8505               LDD     R16, Z+13
   \   00000388   8516               LDD     R17, Z+14
   \   0000038A   01F8               MOVW    R31:R30, R17:R16
   \   0000038C   8504               LDD     R16, Z+12
   \   0000038E   8515               LDD     R17, Z+13
   \   00000390   0F20               ADD     R18, R16
   \   00000392   1F31               ADC     R19, R17
   \   00000394   018D               MOVW    R17:R16, R27:R26
   \   00000396   ....               RCALL   ??Receive
   \   00000398   01C8               MOVW    R25:R24, R17:R16
    493          
    494                      if (iReceivedCounter > 0)
   \   0000039A   3081               CPI     R24, 1
   \   0000039C   E000               LDI     R16, 0
   \   0000039E   0790               CPC     R25, R16
   \   000003A0   F06C               BRLT    ??Fsm_28
    495                      {
    496                          GetSystemTime();
   \   000003A2   018D               MOVW    R17:R16, R27:R26
   \   000003A4   ....               RCALL   ??GetSystemTime
    497                          m_uiMessageLength += iReceivedCounter;
   \   000003A6   01FD               MOVW    R31:R30, R27:R26
   \   000003A8   8505               LDD     R16, Z+13
   \   000003AA   8516               LDD     R17, Z+14
   \   000003AC   01F8               MOVW    R31:R30, R17:R16
   \   000003AE   8504               LDD     R16, Z+12
   \   000003B0   8515               LDD     R17, Z+13
   \   000003B2   0F08               ADD     R16, R24
   \   000003B4   1F19               ADC     R17, R25
   \   000003B6   8704               STD     Z+12, R16
   \   000003B8   8715               STD     Z+13, R17
   \   000003BA   C00A               RJMP    ??Fsm_27
    498                      }
    499                      else if (iReceivedCounter == -1)
   \                     ??Fsm_28:
   \   000003BC   3F8F               CPI     R24, 255
   \   000003BE   EF0F               LDI     R16, 255
   \   000003C0   0790               CPC     R25, R16
   \   000003C2   F431               BRNE    ??Fsm_27
    500                      {
    501                          SetFsmState(STOP_CONFIRMATION);
   \   000003C4   E123               LDI     R18, 19
   \   000003C6   01FD               MOVW    R31:R30, R27:R26
   \   000003C8   8505               LDD     R16, Z+13
   \   000003CA   8516               LDD     R17, Z+14
   \   000003CC   ........           CALL    ??SetFsmState
    502                      }
    503                  }
    504          
    505                  if (TimeIsOver(m_uiGuardTimeout))
   \                     ??Fsm_27:
   \   000003D0   01FD               MOVW    R31:R30, R27:R26
   \   000003D2   8521               LDD     R18, Z+9
   \   000003D4   8532               LDD     R19, Z+10
   \   000003D6   018D               MOVW    R17:R16, R27:R26
   \   000003D8   ....               RCALL   ??TimeIsOver
   \   000003DA   2300               TST     R16
   \   000003DC   F0E9               BREQ    ??Fsm_29
    506                  {
    507                      if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
   \   000003DE   01FD               MOVW    R31:R30, R27:R26
   \   000003E0   8505               LDD     R16, Z+13
   \   000003E2   8516               LDD     R17, Z+14
   \   000003E4   01F8               MOVW    R31:R30, R17:R16
   \   000003E6   8544               LDD     R20, Z+12
   \   000003E8   8555               LDD     R21, Z+13
   \   000003EA   01FD               MOVW    R31:R30, R27:R26
   \   000003EC   8505               LDD     R16, Z+13
   \   000003EE   8516               LDD     R17, Z+14
   \   000003F0   01F8               MOVW    R31:R30, R17:R16
   \   000003F2   8526               LDD     R18, Z+14
   \   000003F4   8537               LDD     R19, Z+15
   \   000003F6   018D               MOVW    R17:R16, R27:R26
   \   000003F8   ....               RCALL   ??FrameCheck_1
   \   000003FA   2300               TST     R16
   \   000003FC   F039               BREQ    ??Fsm_30
    508                      {
    509                          SetFsmState(REPLY_CONFIRMATION);
   \   000003FE   E02F               LDI     R18, 15
   \   00000400   01FD               MOVW    R31:R30, R27:R26
   \   00000402   8505               LDD     R16, Z+13
   \   00000404   8516               LDD     R17, Z+14
   \   00000406   ........           CALL    ??SetFsmState
   \   0000040A   C06C               RJMP    ??Fsm_2
    510                      }
    511                      else
    512                      {
    513                          SetFsmState(STOP_CONFIRMATION);
   \                     ??Fsm_30:
   \   0000040C   E123               LDI     R18, 19
   \   0000040E   01FD               MOVW    R31:R30, R27:R26
   \   00000410   8505               LDD     R16, Z+13
   \   00000412   8516               LDD     R17, Z+14
   \   00000414   ........           CALL    ??SetFsmState
    514                      }
    515                  }
    516          
    517                  break;
   \                     ??Fsm_29:
   \   00000418   C065               RJMP    ??Fsm_2
    518          
    519              case REPLY_CONFIRMATION:
    520                  if (ReceiveMessage(m_puiRxBuffer, m_uiMessageLength))
   \                     ??Fsm_31:
   \   0000041A   01FD               MOVW    R31:R30, R27:R26
   \   0000041C   8505               LDD     R16, Z+13
   \   0000041E   8516               LDD     R17, Z+14
   \   00000420   01F8               MOVW    R31:R30, R17:R16
   \   00000422   8544               LDD     R20, Z+12
   \   00000424   8555               LDD     R21, Z+13
   \   00000426   01FD               MOVW    R31:R30, R27:R26
   \   00000428   8505               LDD     R16, Z+13
   \   0000042A   8516               LDD     R17, Z+14
   \   0000042C   01F8               MOVW    R31:R30, R17:R16
   \   0000042E   8526               LDD     R18, Z+14
   \   00000430   8537               LDD     R19, Z+15
   \   00000432   01FD               MOVW    R31:R30, R27:R26
   \   00000434   8505               LDD     R16, Z+13
   \   00000436   8516               LDD     R17, Z+14
   \   00000438   ........           CALL    ??ReceiveMessage
   \   0000043C   2B01               OR      R16, R17
   \   0000043E   F039               BREQ    ??Fsm_32
    521                  {
    522                      SetFsmState(STOP_CONFIRMATION);
   \   00000440   E123               LDI     R18, 19
   \   00000442   01FD               MOVW    R31:R30, R27:R26
   \   00000444   8505               LDD     R16, Z+13
   \   00000446   8516               LDD     R17, Z+14
   \   00000448   ........           CALL    ??SetFsmState
   \   0000044C   C04B               RJMP    ??Fsm_2
    523                  }
    524                  else
    525                  {
    526                      SetFsmState(STOP_CONFIRMATION);
   \                     ??Fsm_32:
   \   0000044E   E123               LDI     R18, 19
   \   00000450   01FD               MOVW    R31:R30, R27:R26
   \   00000452   8505               LDD     R16, Z+13
   \   00000454   8516               LDD     R17, Z+14
   \   00000456   ........           CALL    ??SetFsmState
    527                  }
    528                  break;
   \   0000045A   C044               RJMP    ??Fsm_2
    529          
    530              case FRAME_TRANSMIT_REQUEST:
    531                  GetSystemTime();
   \                     ??Fsm_33:
   \   0000045C   018D               MOVW    R17:R16, R27:R26
   \   0000045E   ....               RCALL   ??GetSystemTime
    532                  Reset();
   \   00000460   018D               MOVW    R17:R16, R27:R26
   \   00000462   ....               RCALL   ??Reset
    533                  CPlatform::TxLedOn();
   \   00000464   ........           CALL    ??TxLedOn
    534                  SetFsmState(WAITING_FRAME_TRANSMIT_REQUEST);
   \   00000468   E121               LDI     R18, 17
   \   0000046A   01FD               MOVW    R31:R30, R27:R26
   \   0000046C   8505               LDD     R16, Z+13
   \   0000046E   8516               LDD     R17, Z+14
   \   00000470   ........           CALL    ??SetFsmState
    535                  break;
   \   00000474   C037               RJMP    ??Fsm_2
    536          
    537              case WAITING_FRAME_TRANSMIT_REQUEST:
    538                  if (TimeIsOver(m_uiTransmitDelayTimeout))
   \                     ??Fsm_34:
   \   00000476   E025               LDI     R18, 5
   \   00000478   E030               LDI     R19, 0
   \   0000047A   018D               MOVW    R17:R16, R27:R26
   \   0000047C   ....               RCALL   ??TimeIsOver
   \   0000047E   2300               TST     R16
   \   00000480   F189               BREQ    ??Fsm_2
    539                  {
    540                      SendMessage(m_puiTxBuffer, m_uiMessageLength);
   \   00000482   01FD               MOVW    R31:R30, R27:R26
   \   00000484   8505               LDD     R16, Z+13
   \   00000486   8516               LDD     R17, Z+14
   \   00000488   01F8               MOVW    R31:R30, R17:R16
   \   0000048A   8544               LDD     R20, Z+12
   \   0000048C   8555               LDD     R21, Z+13
   \   0000048E   01FD               MOVW    R31:R30, R27:R26
   \   00000490   8505               LDD     R16, Z+13
   \   00000492   8516               LDD     R17, Z+14
   \   00000494   01F8               MOVW    R31:R30, R17:R16
   \   00000496   8920               LDD     R18, Z+16
   \   00000498   8931               LDD     R19, Z+17
   \   0000049A   01FD               MOVW    R31:R30, R27:R26
   \   0000049C   8505               LDD     R16, Z+13
   \   0000049E   8516               LDD     R17, Z+14
   \   000004A0   ........           CALL    ??SendMessage
    541                      TransmitEnable();
   \   000004A4   018D               MOVW    R17:R16, R27:R26
   \   000004A6   ....               RCALL   ??TransmitEnable
    542                      SetFsmState(END_WAITING_FRAME_TRANSMIT_REQUEST);
   \   000004A8   E122               LDI     R18, 18
   \   000004AA   01FD               MOVW    R31:R30, R27:R26
   \   000004AC   8505               LDD     R16, Z+13
   \   000004AE   8516               LDD     R17, Z+14
   \   000004B0   ........           CALL    ??SetFsmState
    543                  }
    544                  break;
   \   000004B4   C017               RJMP    ??Fsm_2
    545          
    546              case END_WAITING_FRAME_TRANSMIT_REQUEST:
    547                  if (MessageIsSended())
   \                     ??Fsm_35:
   \   000004B6   018D               MOVW    R17:R16, R27:R26
   \   000004B8   ....               RCALL   ??MessageIsSended
   \   000004BA   2300               TST     R16
   \   000004BC   F099               BREQ    ??Fsm_2
    548                  {
    549                      TransmitDisable();
   \   000004BE   018D               MOVW    R17:R16, R27:R26
   \   000004C0   ....               RCALL   ??TransmitDisable
    550                      CPlatform::TxLedOff();
   \   000004C2   ........           CALL    ??TxLedOff
    551                      SetFsmState(START_CONFIRMATION);
   \   000004C6   E02C               LDI     R18, 12
   \   000004C8   01FD               MOVW    R31:R30, R27:R26
   \   000004CA   8505               LDD     R16, Z+13
   \   000004CC   8516               LDD     R17, Z+14
   \   000004CE   ........           CALL    ??SetFsmState
    552                  }
    553          
    554                  break;
   \   000004D2   C008               RJMP    ??Fsm_2
    555          
    556              case STOP_CONFIRMATION:
    557                  ReceiveDisable();
   \                     ??Fsm_36:
   \   000004D4   018D               MOVW    R17:R16, R27:R26
   \   000004D6   ....               RCALL   ??ReceiveDisable
    558          //        Close();
    559                  SetFsmState(IDDLE);
   \   000004D8   E020               LDI     R18, 0
   \   000004DA   01FD               MOVW    R31:R30, R27:R26
   \   000004DC   8505               LDD     R16, Z+13
   \   000004DE   8516               LDD     R17, Z+14
   \   000004E0   ........           CALL    ??SetFsmState
    560                  break;
    561          
    562              default:
    563                  break;
    564              }
    565          }
   \                     ??Fsm_2:
   \   000004E4   E0E4               LDI     R30, 4
   \   000004E6   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for Fsm>_0`:
   \   00000000   00                 DB      0
   \   00000001   00                 DB      0
   \   00000002   ....               DW      (??Fsm_2) /2
   \   00000004   0014               DW      20
   \   00000006   ....               DW      (??Fsm_2) /2
   \   00000008   ....               DW      (??Fsm_2) /2
   \   0000000A   ....               DW      (??Fsm_1) /2
   \   0000000C   ....               DW      (??Fsm_3) /2
   \   0000000E   ....               DW      (??Fsm_4) /2
   \   00000010   ....               DW      (??Fsm_8) /2
   \   00000012   ....               DW      (??Fsm_13) /2
   \   00000014   ....               DW      (??Fsm_15) /2
   \   00000016   ....               DW      (??Fsm_16) /2
   \   00000018   ....               DW      (??Fsm_18) /2
   \   0000001A   ....               DW      (??Fsm_20) /2
   \   0000001C   ....               DW      (??Fsm_2) /2
   \   0000001E   ....               DW      (??Fsm_21) /2
   \   00000020   ....               DW      (??Fsm_22) /2
   \   00000022   ....               DW      (??Fsm_26) /2
   \   00000024   ....               DW      (??Fsm_31) /2
   \   00000026   ....               DW      (??Fsm_33) /2
   \   00000028   ....               DW      (??Fsm_34) /2
   \   0000002A   ....               DW      (??Fsm_35) /2
   \   0000002C   ....               DW      (??Fsm_36) /2

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 CModbusRTU &CModbusRTU::new CModbusRTU()
   \                     `??new CModbusRTU`:
   \   00000000   E301               LDI     R16, 49
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   2B21               OR      R18, R17
   \   0000000C   F021               BREQ    `??new CModbusRTU_1`
   \   0000000E   E020               LDI     R18, 0
   \   00000010   E030               LDI     R19, 0
   \   00000012   ....               RCALL   ??CModbusRTU
   \   00000014   9508               RET
   \                     `??new CModbusRTU_1`:
   \   00000016   E000               LDI     R16, 0
   \   00000018   E010               LDI     R17, 0
   \   0000001A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void CModbusRTU::~CModbusRTU for CDfaLite/-15/()
   \                     `?~CModbusRTU for CDfaLite/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    `?~CModbusRTU`

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 int16_t CModbusRTU::Tail for CModbus/-15/(uint8_t *, uint16_t)
   \                     `??Tail for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    ??Tail

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 int16_t CModbusRTU::RequestBasis for CModbus/-15/(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
   \                     `??RequestBasis for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    ??RequestBasis

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 int16_t CModbusRTU::ResponseBasis for CModbus/-15/(uint8_t, uint8_t, uint8_t *)
   \                     `??ResponseBasis for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    ??ResponseBasis

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 int16_t CModbusRTU::Send for CModbus/-15/(uint8_t *, uint16_t)
   \                     `??Send for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    ??Send

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void CModbusRTU::Fsm for CDfaLite/-15/()
   \                     `??Fsm for CDfaLite/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ....               RJMP    ??Fsm

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CModbusRTU::HEADER_LENGTH for CModbus/-15/()
   \                     `??HEADER_LENGTH for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ........           JMP     ??HEADER_LENGTH

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 uint16_t CModbusRTU::CRC_LENGTH for CModbus/-15/()
   \                     `??CRC_LENGTH for CModbus/-15/`:
   \   00000000   500F               SUBI    R16, 15
   \   00000002   4010               SBCI    R17, 0
   \   00000004   ........           JMP     ??CRC_LENGTH
    566          //-----------------------------------------------------------------------------------------------------
    567          
    568          
    569          
    570          
    571          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   CDfaLite::GetFsmState()
      0      2   CDfaLite::SetFsmState(uint8_t)
      6      2   CModbusRTU::CModbusRTU()
        6      2   -> CModbus::CModbus()
      0      2   CModbusRTU::CRC_LENGTH for CModbus/-15/()
        0      2   -> CModbusRTU::CRC_LENGTH()
      0      2   CModbusRTU::CRC_LENGTH()
      2      2   CModbusRTU::Close()
        2      2   -> CUart::Close()
      2      2   CModbusRTU::ConfirmationReceiveTimeIsOver()
        2      2   -> CPlatform::GetSystemTick()
      4      2   CModbusRTU::FrameCheck()
        4      2   -> CUart::GetFrameLength()
        4      2   -> usCrc16(unsigned char const *, uint16_t)
     10      2   CModbusRTU::FrameCheck(uint8_t *, uint16_t)
       10      2   -> usCrc16(unsigned char const *, uint16_t)
      2      2   CModbusRTU::FrameIsReceived()
        2      2   -> CPlatform::GetSystemTick()
      0      2   CModbusRTU::Fsm for CDfaLite/-15/()
        0      2   -> CModbusRTU::Fsm()
      4      2   CModbusRTU::Fsm()
        4      2   -> CDfaLite::GetFsmState()
        4      2   -> CDfaLite::SetFsmState(uint8_t)
        4      2   -> CModbus::ReceiveMessage(uint8_t *, uint16_t)
        4      2   -> CModbus::Reply(uint8_t *, uint8_t *, uint16_t)
        4      2   -> CModbus::SendMessage(uint8_t *, uint16_t)
        4      2   -> CModbusRTU::FrameCheck(uint8_t *, uint16_t)
        4      2   -> CModbusRTU::GetSystemTime()
        4      2   -> CModbusRTU::MessageIsSended()
        4      2   -> CModbusRTU::Receive(uint8_t *, uint16_t)
        4      2   -> CModbusRTU::ReceiveDisable()
        4      2   -> CModbusRTU::ReceiveEnable()
        4      2   -> CModbusRTU::Reset()
        4      2   -> CModbusRTU::Select()
        4      2   -> CModbusRTU::TimeIsOver(uint16_t)
        4      2   -> CModbusRTU::TransmitDisable()
        4      2   -> CModbusRTU::TransmitEnable()
        4      2   -> CPlatform::TxLedOff()
        4      2   -> CPlatform::TxLedOn()
        4      2 ?CV_SWITCH_L06
      2      2   CModbusRTU::GetFrameLength()
        2      2   -> CUart::GetFrameLength()
      2      2   CModbusRTU::GetSystemTime()
        2      2   -> CPlatform::GetSystemTick()
      0      2   CModbusRTU::HEADER_LENGTH for CModbus/-15/()
        0      2   -> CModbusRTU::HEADER_LENGTH()
      0      2   CModbusRTU::HEADER_LENGTH()
     46      2   CModbusRTU::Init(CUart *, uint32_t, char, uint8_t, uint8_t, uint8_t *, uint8_t *, uint8_t *, uint8_t *, uint16_t *, uint16_t *, uint16_t, uint16_t, uint16_t, uint16_t)
       41      2   -> CUart::Init(uint32_t, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *)
       41      2   -> memset
       41      2 ?L_EC_MUL_L03
       41      2 ?UL_DIVMOD_L03
      2      2   CModbusRTU::MessageIsSended()
        2      2   -> CUart::FrameIsSended()
      2      2   CModbusRTU::Open()
        2      2   -> CUart::Open()
      6      2   CModbusRTU::Receive(uint8_t *, uint16_t)
        6      2   -> CUart::Read(uint8_t *, uint16_t)
      2      2   CModbusRTU::ReceiveDisable()
        2      2   -> CUart::Disable()
      2      2   CModbusRTU::ReceiveEnable()
        2      2   -> CUart::Enable()
      2      2   CModbusRTU::ReceiveTimeIsOver()
        2      2   -> CPlatform::GetSystemTick()
      2      2   CModbusRTU::RequestBasis for CModbus/-15/(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
        2      2   -> CModbusRTU::RequestBasis(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
      2      2   CModbusRTU::RequestBasis(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
      2      2   CModbusRTU::Reset()
        2      2   -> CUart::Reset()
      0      2   CModbusRTU::ResponseBasis for CModbus/-15/(uint8_t, uint8_t, uint8_t *)
        0      2   -> CModbusRTU::ResponseBasis(uint8_t, uint8_t, uint8_t *)
      0      2   CModbusRTU::ResponseBasis(uint8_t, uint8_t, uint8_t *)
      2      2   CModbusRTU::Select()
        2      2   -> CUart::ByteIsReceived()
      0      2   CModbusRTU::Send for CModbus/-15/(uint8_t *, uint16_t)
        0      2   -> CModbusRTU::Send(uint8_t *, uint16_t)
      6      2   CModbusRTU::Send(uint8_t *, uint16_t)
        6      2   -> CUart::Write(uint8_t *, uint16_t)
      0      2   CModbusRTU::Tail for CModbus/-15/(uint8_t *, uint16_t)
        0      2   -> CModbusRTU::Tail(uint8_t *, uint16_t)
      6      2   CModbusRTU::Tail(uint8_t *, uint16_t)
        6      2   -> usCrc16(unsigned char const *, uint16_t)
      4      2   CModbusRTU::TimeIsOver(uint16_t)
        4      2   -> CPlatform::GetSystemTick()
      2      2   CModbusRTU::TransmitDelayTimeIsOver()
        2      2   -> CPlatform::GetSystemTick()
      2      2   CModbusRTU::TransmitDisable()
        2      2   -> CUart::TransmitDisable()
      2      2   CModbusRTU::TransmitEnable()
        2      2   -> CUart::TransmitEnable()
      0      2   CModbusRTU::new CModbusRTU()
        0      2   -> CModbusRTU::CModbusRTU()
        0      2   -> operator new(unsigned int)
      0      2   CModbusRTU::~CModbusRTU for CDfaLite/-15/()
        0      2   -> CModbusRTU::~CModbusRTU()
      4      2   CModbusRTU::~CModbusRTU()
        4      2   -> CModbus::~CModbus()
        4      2   -> operator delete(void *)
      0      2   CPlatform::GetSystemTick()
      0      2   CPlatform::TxLedOff()
      0      2   CPlatform::TxLedOn()
      0      2   CUart::ByteIsReceived()
      0      2   CUart::FrameIsSended()
      0      2   CUart::GetFrameLength()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      46  ?<Jumptable for Fsm>_0
       6  CDfaLite::GetFsmState()
       6  CDfaLite::SetFsmState(uint8_t)
      98  CModbusRTU::CModbusRTU()
       8  CModbusRTU::CRC_LENGTH for CModbus/-15/()
       8  CModbusRTU::CRC_LENGTH()
      22  CModbusRTU::Close()
      46  CModbusRTU::ConfirmationReceiveTimeIsOver()
     156  CModbusRTU::FrameCheck()
      94  CModbusRTU::FrameCheck(uint8_t *, uint16_t)
      50  CModbusRTU::FrameIsReceived()
       6  CModbusRTU::Fsm for CDfaLite/-15/()
    1258  CModbusRTU::Fsm()
      22  CModbusRTU::GetFrameLength()
      28  CModbusRTU::GetSystemTime()
       8  CModbusRTU::HEADER_LENGTH for CModbus/-15/()
       8  CModbusRTU::HEADER_LENGTH()
     428  CModbusRTU::Init(CUart *, uint32_t, char, uint8_t, uint8_t, uint8_t *, uint8_t *, uint8_t *, uint8_t *, uint16_t *, uint16_t *, uint16_t, uint16_t, uint16_t, uint16_t)
      22  CModbusRTU::MessageIsSended()
      22  CModbusRTU::Open()
      30  CModbusRTU::Receive(uint8_t *, uint16_t)
      22  CModbusRTU::ReceiveDisable()
      22  CModbusRTU::ReceiveEnable()
      46  CModbusRTU::ReceiveTimeIsOver()
       6  CModbusRTU::RequestBasis for CModbus/-15/(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
      46  CModbusRTU::RequestBasis(uint8_t, uint8_t, uint16_t, uint16_t, uint8_t *)
      22  CModbusRTU::Reset()
       6  CModbusRTU::ResponseBasis for CModbus/-15/(uint8_t, uint8_t, uint8_t *)
      16  CModbusRTU::ResponseBasis(uint8_t, uint8_t, uint8_t *)
      22  CModbusRTU::Select()
       6  CModbusRTU::Send for CModbus/-15/(uint8_t *, uint16_t)
      30  CModbusRTU::Send(uint8_t *, uint16_t)
       6  CModbusRTU::Tail for CModbus/-15/(uint8_t *, uint16_t)
      56  CModbusRTU::Tail(uint8_t *, uint16_t)
      46  CModbusRTU::TimeIsOver(uint16_t)
      44  CModbusRTU::TransmitDelayTimeIsOver()
      22  CModbusRTU::TransmitDisable()
      22  CModbusRTU::TransmitEnable()
      28  CModbusRTU::new CModbusRTU()
       6  CModbusRTU::~CModbusRTU for CDfaLite/-15/()
      50  CModbusRTU::~CModbusRTU()
      10  CPlatform::GetSystemTick()
       4  CPlatform::TxLedOff()
       4  CPlatform::TxLedOn()
       6  CUart::ByteIsReceived()
       6  CUart::FrameIsSended()
       8  CUart::GetFrameLength()
       1  _A_ACSR
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_ASSR
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIFR
       1  _A_EIMSK
       1  _A_ETIFR
       1  _A_ETIMSK
       2  _A_ICR1
       2  _A_ICR3
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCDR
       1  _A_OCR0
       2  _A_OCR1A
       2  _A_OCR1B
       2  _A_OCR1C
       1  _A_OCR2
       2  _A_OCR3A
       2  _A_OCR3B
       2  _A_OCR3C
       1  _A_OSCCAL
       1  _A_PINA
       1  _A_PINB
       1  _A_PINC
       1  _A_PIND
       1  _A_PINE
       1  _A_PINF
       1  _A_PING
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_RAMPZ
       1  _A_SFIOR
       2  _A_SP
       1  _A_SPCR
       1  _A_SPDR
       1  _A_SPMCSR
       1  _A_SPSR
       1  _A_SREG
       1  _A_TCCR0
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCCR1C
       1  _A_TCCR2
       1  _A_TCCR3A
       1  _A_TCCR3B
       1  _A_TCCR3C
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_TCNT2
       2  _A_TCNT3
       1  _A_TIFR
       1  _A_TIMSK
       1  _A_TWAR
       1  _A_TWBR
       1  _A_TWCR
       1  _A_TWDR
       1  _A_TWSR
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UBRR1H
       1  _A_UBRR1L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UDR0
       1  _A_UDR1
       1  _A_WDTCR
       1  _A_XDIV
       1  _A_XMCRA
       1  _A_XMCRB
      58  -- Other

 
   105 bytes in segment ABSOLUTE
 2 888 bytes in segment CODE
    58 bytes in segment NEAR_F
    46 bytes in segment SWITCH
 
 2 894 bytes of CODE memory (+  98 bytes shared)
     0 bytes of DATA memory (+ 105 bytes shared)

Errors: none
Warnings: 7
